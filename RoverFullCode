#include <SPI.h>
#include <WiFi101.h>


#include "arduino_secrets.h" 
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;    // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;                 // your network key Index number (needed only for WEP)

int status = WL_IDLE_STATUS;
int LM = 0;
int RM = 1;
int led =  LED_BUILTIN;

int radioHigh;
int radioLow;
float radioTotal;
float radioFrequency;

int hallSensorPin = 0;
int detectPin = 13;
float voltage;
float neutral;
int check = 0;
float total;

int infHigh;
int infLow;
float infTotal;
float infFrequency;

int acousticHigh;
int acousticLow;
float acousticTotal;
float acousticFrequency;

bool inputSignal = true;
bool gaborium = false;
bool lathwaite = false;
bool adamantine = false;
bool xiran = false;
bool netherite = false;
bool thiotimoline = false;

WiFiServer server(80);

void setup() {
  //Initialize serial and wait for port to open:
  pinMode(LM, OUTPUT);
  pinMode(RM, OUTPUT);
  pinMode(2, INPUT);
  pinMode(3, INPUT);
  pinMode(4, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);
  Serial.begin(9600);
  //while (!Serial) {
  //  ; // wait for serial port to connect. Needed for native USB port only
  //}
  pinMode(led, OUTPUT);

  WiFi.config(IPAddress(192, 168, 247, 182));
  
  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  // attempt to connect to WiFi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
  server.begin();
  // you're connected now, so print out the status:
  printWiFiStatus();
  //hall effect
  for(int i = 0; i < 100; i++){
    total = total + analogRead(hallSensorPin);
  }
  neutral = total / 100;
}


void loop() {
  // listen for incoming clients
  WiFiClient client = server.available();
  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      voltage = analogRead(hallSensorPin);
    
      acousticHigh = pulseIn(4, HIGH);
      acousticLow = pulseIn(4, LOW);
      acousticTotal = acousticLow + acousticHigh;
      acousticFrequency = 1000 / acousticTotal; //frequncy in KHz
      radioHigh = pulseIn(3, HIGH);
      radioLow = pulseIn(3, LOW);  
      radioTotal = radioHigh + radioLow;
      radioFrequency = 1000000 / radioTotal; // frequency in HZ
      infHigh = pulseIn(5, HIGH);
      infLow = pulseIn(5, LOW);
      infTotal = infLow + infHigh;
      infFrequency = 1000000 / infTotal;
      if(digitalRead(detectPin) == HIGH){
        check = 1;
        if(voltage > neutral + 4){
          Serial.print("south\n");
          client.println("south\n");
          if((radioFrequency >= 234) && (radioFrequency <= 244)){
            xiran = true;
            String writeFreq = String(radioFrequency);
            client.println("Modulated frequency from radio sensor is " + writeFreq + " Hz and rock is xiran");
          }
        }
        else if (voltage < neutral - 4){
          Serial.print("north\n");
          client.println("north\n");
          if((radioFrequency >= 146) && (radioFrequency <= 156)){
            adamantine = true;
            String writeFreq = String(radioFrequency);
            client.println("Modulated frequency from radio sensor is " + writeFreq + " Hz and rock is adamantine");
          }
        }
      }
      else if((acousticFrequency >= 38) && (acousticFrequency <= 42)){
        String writeFreq = String(acousticFrequency);
        client.println("Frequency from acoustic sensor is " + writeFreq + " KHz");
        if((radioFrequency >= 146) && (radioFrequency <= 156)){
          gaborium = true;
          String writeFreq = String(radioFrequency);
          client.println("Modulated frequency from radio sensor is " + writeFreq + " Hz and rock is gaborium");
        }
        else if((infFrequency >= 566) && (infFrequency <= 576)){
          netherite = true;
          String writeFreq = String(infFrequency);
          client.println("Pulse frequency from infrared sensor is " + writeFreq + " Hz and rock is netherite");
        }
      }
      else{
          if((radioFrequency >= 234) && (radioFrequency <= 244)){
            lathwaite = true;
            String writeFreq = String(radioFrequency);
            client.println("Modulated frequency from radio sensor is " + writeFreq + " Hz and rock is lathwaite");
          }
          else if((infFrequency >= 348) && (infFrequency <= 358)){
            thiotimoline = true;
            String writeFreq = String(infFrequency);
            client.println("Pulse frequency from infrared sensor is " + writeFreq + " Hz and rock is thiotimoline");
          }
      }
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/F\">here</a> to go forward<br>");
            client.print("Click <a href=\"/B\">here</a> to stop<br>");
            client.print("Click <a href=\"/L\">here</a> to go left<br>");
            client.print("Click <a href=\"/R\">here</a> to go right<br>");
            

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          }
          else {      // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        }
        else if (c != '\r') {    // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        if (currentLine.endsWith("GET /F"))
        {
        //Move Forward
          digitalWrite(LM, HIGH);
          digitalWrite(RM, HIGH);
        }
        else if (currentLine.endsWith("GET /S"))
        {
        //Stop
          digitalWrite(LM, LOW);
          digitalWrite(RM, LOW);
        }
        else if (currentLine.endsWith("GET /L"))
        {
        //Left Turn
          digitalWrite(RM, HIGH);
          digitalWrite(LM, LOW);
        }
        else if (currentLine.endsWith("GET /R"))
        {
        //Right Turn
          digitalWrite(RM, LOW);
          digitalWrite(LM, HIGH);
        }
      }
    }
  }
}


void printWiFiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
